{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Tera",
	"scopeName": "source.tera",
	"fileTypes": ["tera"],
	"patterns": [
		{
			"include": "#frontmatter"
		},
		{
			"include": "#commentTag"
		},
		{
			"include": "#expressionTag"
		},
		{
			"include": "#statementTag"
		},
		{
			"include": "#rawBlock"
		}
	],
	"repository": {
		"commentTag": {
			"begin": "{#-?",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.comment.tera" }
			},
			"end": "-?#}",
			"endCaptures": {
				"0": { "name": "punctuation.definition.comment.tera" }
			},
			"name": "comment.block.tera"
		},
		"expressionTag": {
			"begin": "{{-?",
			"beginCaptures": {
				"0": { "name": "punctuation.section.group.begin.tera" }
			},
			"end": "-?}}",
			"endCaptures": {
				"0": { "name": "punctuation.section.group.end.tera" }
			},
			"name": "meta.scope.tera.expression",
			"patterns": [{ "include": "#expression" }]
		},
		"statementTag": {
			"patterns": [
				{
					"begin": "{%-?\\s*(if|elif|for|filter|macro|set|set_global|include|import|extends)\\s+",
					"beginCaptures": {
						"0": { "name": "punctuation.section.block.begin.tera" },
						"1": { "name": "keyword.control.tera" }
					},
					"end": "-?%}",
					"endCaptures": {
						"0": { "name": "punctuation.section.block.end.tera" }
					},
					"name": "meta.scope.tera.tag",
					"patterns": [{ "include": "#expression" }]
				},
				{
					"begin": "{%-?\\s*(block|endblock|filter|endfilter|endmacro)\\s+",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.tera" },
						"1": { "name": "keyword.control.tera" }
					},
					"end": "-?%}",
					"endCaptures": {
						"0": { "name": "punctuation.definition.tera" }
					},
					"name": "meta.scope.tera.tag",
					"patterns": [{ "include": "#identifier" }]
				},
				{
					"match": "{%-?\\s*(else|elif|endif|endfor|continue|break|endblock|endfilter|endmacro)\\s*-?%}",
					"captures": {
						"0": { "name": "punctuation.definition.tera" },
						"1": { "name": "keyword.control.tera" },
						"2": { "name": "punctuation.definition.tera" }
					},
					"name": "meta.scope.tera.tag"
				}
			]
		},
		"rawBlock": {
			"begin": "{%-?\\s*(raw)\\s*-?%}",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.tera" },
				"1": { "name": "keyword.control.tera" },
				"2": { "name": "punctuation.definition.tera" }
			},
			"end": "{%-?\\s*(endraw)\\s*-?%}",
			"endCaptures": {
				"0": { "name": "punctuation.definition.tera" },
				"1": { "name": "keyword.control.tera" },
				"2": { "name": "punctuation.definition.tera" }
			},
			"name": "markup.raw.block.tera"
		},
		"identifier": {
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]+)\\b",
			"name": "variable.other.tera"
		},
		"test": {
			"match": "\\s*\\b(is)\\s+(not\\s+)?(\\w+)\\b",
			"captures": {
				"1": { "name": "keyword.control.tera" },
				"2": { "name": "keyword.control.tera" },
				"3": { "name": "entity.name.function.tera" }
			}
		},
		"filter": {
			"patterns": [
				{
					"begin": "(\\|)\\s*\\b(\\w+)\\b\\(",
					"beginCaptures": {
						"1": { "name": "keyword.operator.tera" },
						"2": { "name": "entity.name.function.tera" }
					},
					"end": "\\)",
					"patterns": [{ "include": "#arguments" }]
				},
				{
					"match": "(\\|)\\s*\\b(\\w+)\\b",
					"captures": {
						"1": { "name": "keyword.operator.tera" },
						"2": { "name": "entity.name.function.tera" }
					}
				}
			]
		},
		"function": {
			"begin": "\\b(?:(\\w+)(::))?(\\w+)\\s*\\(",
			"beginCaptures": {
				"1": { "name": "entity.name.namespace.tera" },
				"2": { "name": "punctuation.separator.namespace.tera" },
				"3": { "name": "entity.name.function.tera" }
			},
			"end": "\\)",
			"patterns": [{ "include": "#arguments" }]
		},
		"boolean": {
			"match": "\\b[Tt]rue|[Ff]alse\\b",
			"name": "constant.language.boolean.tera"
		},
		"number": {
			"match": "[+-]?[0-9]+(\\.[0-9]+)?",
			"name": "constant.numeric.tera"
		},
		"expression": {
			"patterns": [
				{ "include": "#test" },
				{
					"match": "(\\+|\\-|\\*|/|%|~)",
					"name": "keyword.operator.arithmetic.tera"
				},
				{ "include": "#filter" },
				{
					"match": "\\b(loop|__tera_context)\\b",
					"name": "variable.language.tera"
				},
				{ "include": "#function" },
				{
					"match": "(\\.)(\\w+)",
					"captures": {
						"1": { "name": "punctuation.accessor.tera" },
						"2": { "name": "variable.other.member" }
					}
				},
				{
					"match": "\\[(\\w+)\\]",
					"captures": {
						"1": { "name": "variable.other.tera" }
					}
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": { "name": "punctuation.section.brackets.begin.tera" }
					},
					"end": "\\]",
					"endCaptures": {
						"0": { "name": "punctuation.section.brackets.end.tera" }
					},
					"patterns": [{ "include": "#expression" }]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": { "name": "punctuation.section.parens.begin.tera" }
					},
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "punctuation.section.parens.end.tera" }
					},
					"patterns": [{ "include": "#expression" }]
				},
				{
					"match": "(,)",
					"name": "punctuation.separator.tera"
				},
				{
					"match": "(==|>=|<=|<|>|!=)",
					"name": "keyword.operator.comparison.tera"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.tera"
				},
				{
					"match": "\\b(in|and|or|not|is|as)\\b",
					"name": "keyword.operator.word.tera"
				},
				{ "include": "#number" },
				{ "include": "#boolean" },
				{ "include": "#identifier" },
				{
					"begin": "\"",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.string.begin.tera" }
					},
					"end": "\"",
					"endCaptures": {
						"0": { "name": "punctuation.definition.string.end.tera" }
					},
					"name": "string.quoted.double.tera",
					"patterns": [{ "include": "#string" }]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.string.begin.tera" }
					},
					"end": "'",
					"endCaptures": {
						"0": { "name": "punctuation.definition.string.end.tera" }
					},
					"name": "string.quoted.single.tera",
					"patterns": [{ "include": "#string" }]
				},
				{
					"begin": "`",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.string.begin.tera" }
					},
					"end": "`",
					"endCaptures": {
						"0": { "name": "punctuation.definition.string.end.tera" }
					},
					"name": "string.quoted.other.tera",
					"patterns": [{ "include": "#string" }]
				}
			]
		},
		"arguments": {
			"patterns": [
				{
					"match": "\\b(\\w+)\\s*(=)\\s*",
					"captures": {
						"1": { "name": "variable.parameter.tera" },
						"2": { "name": "keyword.operator.assignment.tera" }
					}
				},
				{ "include": "#expression" }
			]
		},
		"string": {
			"match": "\\\\.",
			"name": "constant.character.escape.tera"
		},
		"frontmatter": {
			"begin": "\\A---\\s*$",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.frontmatter.begin.tera" }
			},
			"end": "^---\\s*$",
			"endCaptures": {
				"0": { "name": "punctuation.definition.frontmatter.end.tera" }
			},
			"contentName": "meta.embedded.block.yaml",
			"patterns": [
				{
					"include": "source.yaml"
				}
			]
		}
	}
}
